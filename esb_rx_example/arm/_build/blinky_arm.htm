<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\blinky_arm.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\blinky_arm.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Thu Feb 26 15:53:33 2015
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; esb_init &rArr; nrf_esb_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2b]">__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[14]">CCM_AAR_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[13]">ECB_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[b]">GPIOTE_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[18]">LPCOMP_COMP_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[6]">POWER_CLOCK_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[17]">QDEC_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[7]">RADIO_IRQHandler</a> from nrf_link_core.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[12]">RNG_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[10]">RTC0_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[16]">RTC1_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[9]">SPI0_TWI0_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[a]">SPI1_TWI1_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[19]">SWI0_IRQHandler</a> from nrf_notification_manager.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI1_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI2_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI3_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI4_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI5_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from startup_arm_nrf51.o(.text)
 <LI><a href="#[11]">TEMP_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[d]">TIMER0_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER1_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER2_IRQHandler</a> from nrf_flywheel.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[8]">UART0_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from startup_arm_nrf51.o(.text) referenced from startup_arm_nrf51.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_arm_nrf51.o(.text)
 <LI><a href="#[24]">async_state_packet_received</a> from nrf_impala.o(.text) referenced 2 times from nrf_impala.o(.text)
 <LI><a href="#[23]">async_state_tx_ack_complete</a> from nrf_impala.o(.text) referenced from nrf_impala.o(.text)
 <LI><a href="#[25]">device_ack_received</a> from nrf_impala.o(.text) referenced from nrf_impala.o(.text)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[22]">notification_cb</a> from nrf_esb.o(.text) referenced from nrf_esb.o(.text)
 <LI><a href="#[28]">nrf_impl_state_fun_device_send_packet</a> from nrf_impala.o(.text) referenced from nrf_state_machine.o(.data)
 <LI><a href="#[27]">nrf_impl_state_fun_timeslot_start</a> from nrf_impala.o(.text) referenced from nrf_state_machine.o(.data)
 <LI><a href="#[26]">nrf_sm_execute</a> from nrf_state_machine.o(.text) referenced from nrf_impala.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[da]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[db]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[dc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2b]"></a>__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_link_core.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPCOMP_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arm_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>nrf_esb_set_xosc_ctl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_xosc_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_xosc_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[2e]"></a>nrf_esb_set_crc_length</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_set_crc_length &rArr; nrf_impl_set_crc_length &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_crc_length
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[31]"></a>nrf_esb_set_datarate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_set_datarate &rArr; nrf_impl_set_datarate
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_datarate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[33]"></a>nrf_esb_set_output_power</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_tx_power
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[35]"></a>nrf_esb_set_base_address_length</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_base_address_length
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_base_address_length
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[37]"></a>nrf_esb_set_mode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
</UL>

<P><STRONG><a name="[39]"></a>nrf_esb_set_channel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_esb_set_channel &rArr; nrf_impl_set_channel_table &rArr; nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[22]"></a>notification_cb</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = notification_cb &rArr; nrf_esb_rx_data_ready &rArr; nrf_esb_flush_rx_fifo &rArr; nrf_impl_flush_rx_fifo &rArr; nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_tx_success
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_tx_failed
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_rx_data_ready
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>nrf_esb_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_esb_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_xosc_ctl
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_tx_power
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_datarate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_crc_length
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_base_address_length
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[43]"></a>nrf_esb_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_esb_enable &rArr; nrf_impl_enable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>nrf_esb_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_is_disabled
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_disable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disabled
</UL>

<P><STRONG><a name="[dd]"></a>nrf_esb_is_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_esb.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>nrf_esb_add_packet_to_tx_fifo</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_reserve_packet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_available_fifo_packets
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[4f]"></a>nrf_esb_fetch_packet_from_rx_fifo</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_esb_fetch_packet_from_rx_fifo &rArr; nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_pop_rx_fifo
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_rx_data_ready
</UL>

<P><STRONG><a name="[51]"></a>nrf_esb_get_tx_fifo_packet_count</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
</UL>

<P><STRONG><a name="[52]"></a>nrf_esb_get_rx_fifo_packet_count</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
</UL>

<P><STRONG><a name="[53]"></a>nrf_esb_flush_tx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_tx_fifo
</UL>

<P><STRONG><a name="[55]"></a>nrf_esb_flush_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_esb_flush_rx_fifo &rArr; nrf_impl_flush_rx_fifo &rArr; nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_rx_data_ready
</UL>

<P><STRONG><a name="[de]"></a>nrf_esb_get_tx_attempts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_esb.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>nrf_esb_get_mode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_mode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[59]"></a>nrf_esb_get_base_address_length</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_base_address_length
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[5b]"></a>nrf_esb_set_base_address_0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_set_base_address_0 &rArr; nrf_impl_set_pipe_0_base_address &rArr; swap_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_pipe_0_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[5d]"></a>nrf_esb_get_base_address_0</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_pipe_0_base_address
</UL>

<P><STRONG><a name="[5f]"></a>nrf_esb_set_base_address_1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_pipes_1_to_7_base_address
</UL>

<P><STRONG><a name="[61]"></a>nrf_esb_get_base_address_1</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_pipes_1_to_7_base_address
</UL>

<P><STRONG><a name="[63]"></a>nrf_esb_set_address_prefix_byte</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_set_address_prefix_byte &rArr; nrf_impl_set_prefix_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_prefix_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[65]"></a>nrf_esb_get_address_prefix_byte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_prefix_byte
</UL>

<P><STRONG><a name="[67]"></a>nrf_esb_set_enabled_prx_pipes</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_enabled_prx_pipes
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_rx_pipes_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[69]"></a>nrf_esb_get_enabled_prx_pipes</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_pipes_enabled
</UL>

<P><STRONG><a name="[6b]"></a>nrf_esb_set_retransmit_delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_retransmit_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_timeslot_period
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[6d]"></a>nrf_esb_get_retransmit_delay</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_timeslot_period
</UL>

<P><STRONG><a name="[6f]"></a>nrf_esb_set_max_number_of_tx_attempts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_esb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_max_number_of_tx_attempts
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_max_allowed_tx_attempts
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[71]"></a>nrf_esb_get_max_number_of_tx_attempts</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_max_allowed_tx_attempts
</UL>

<P><STRONG><a name="[df]"></a>nrf_esb_get_channel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_esb.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>nrf_esb_get_output_power</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_power
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[75]"></a>nrf_esb_get_datarate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_datarate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[77]"></a>nrf_esb_get_crc_length</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_crc_length
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[79]"></a>nrf_esb_get_xosc_ctl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_xosc_ctl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[7b]"></a>nrf_esb_enable_dyn_ack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_dyn_ack_enable
</UL>

<P><STRONG><a name="[7d]"></a>nrf_esb_disable_dyn_ack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_esb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_dyn_ack_enable
</UL>

<P><STRONG><a name="[b7]"></a>nrf_assert_internal_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_esb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[e0]"></a>nrf_gpio_debug_pin_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>nrf_impl_set_dyn_ack_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_set_dyn_ack_status
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable_dyn_ack
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_enable_dyn_ack
</UL>

<P><STRONG><a name="[2d]"></a>nrf_impl_set_xosc_ctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_xosc_ctl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[e1]"></a>nrf_impl_set_idle_activity_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>nrf_impl_set_channel_selection_policy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>nrf_impl_set_crc_length</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_set_crc_length &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_crc_length
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[70]"></a>nrf_impl_set_max_allowed_tx_attempts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_max_number_of_tx_attempts
</UL>

<P><STRONG><a name="[e3]"></a>nrf_impl_set_timeslots_per_channel_when_out_of_sync</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>nrf_impl_set_timeslots_per_channel_when_in_sync</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>nrf_impl_set_timeslot_period</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_retransmit_delay
</UL>

<P><STRONG><a name="[e5]"></a>nrf_impl_set_sync_lifetime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>nrf_impl_set_prefix_byte</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_set_prefix_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_address_prefix_byte
</UL>

<P><STRONG><a name="[60]"></a>nrf_impl_set_pipes_1_to_7_base_address</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
</UL>

<P><STRONG><a name="[5c]"></a>nrf_impl_set_pipe_0_base_address</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_impl_set_pipe_0_base_address &rArr; swap_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[68]"></a>nrf_impl_set_rx_pipes_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_enabled_prx_pipes
</UL>

<P><STRONG><a name="[36]"></a>nrf_impl_set_base_address_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_impala.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_length
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[38]"></a>nrf_impl_set_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_impl_set_mode &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_mode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[41]"></a>nrf_impl_init</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_set_dyn_ack_status
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_ext_capture_task
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bytes
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_prefix_byte
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[44]"></a>nrf_impl_enable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_impl_enable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_get_current_state
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_enable
</UL>

<P><STRONG><a name="[46]"></a>nrf_impl_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[47]"></a>nrf_impl_is_disabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[58]"></a>nrf_impl_get_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_mode
</UL>

<P><STRONG><a name="[4c]"></a>nrf_impl_reserve_packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[3b]"></a>nrf_impl_free_packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_free_packet &rArr; nrf_pm_free_packet &rArr; nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_free_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[4e]"></a>nrf_impl_put_tx_fifo</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[50]"></a>nrf_impl_pop_rx_fifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_pop_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[8f]"></a>nrf_impl_read_rx_fifo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_rx_fifo
</UL>

<P><STRONG><a name="[91]"></a>nrf_impl_read_tx_fifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_tx_fifo
</UL>

<P><STRONG><a name="[4a]"></a>nrf_impl_get_tx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_tx_fifo_status
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_tx_fifo_packet_count
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[4b]"></a>nrf_impl_get_rx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_get_rx_fifo_status &rArr; nrf_pm_get_rx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_rx_fifo_packet_count
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_add_packet_to_tx_fifo
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[49]"></a>nrf_impl_get_available_fifo_packets</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_available_fifo_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[54]"></a>nrf_impl_flush_tx_fifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_tx_fifo
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx_fifo
</UL>

<P><STRONG><a name="[56]"></a>nrf_impl_flush_rx_fifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_impl_flush_rx_fifo &rArr; nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_rx_fifo
</UL>

<P><STRONG><a name="[5e]"></a>nrf_impl_get_pipe_0_base_address</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_base_address_0
</UL>

<P><STRONG><a name="[62]"></a>nrf_impl_get_pipes_1_to_7_base_address</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_base_address_1
</UL>

<P><STRONG><a name="[66]"></a>nrf_impl_get_prefix_byte</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_address_prefix_byte
</UL>

<P><STRONG><a name="[3a]"></a>nrf_impl_set_channel_table</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_set_channel_table &rArr; nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_channel
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[e6]"></a>nrf_impl_get_sync_lifetime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>nrf_impl_get_base_address_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_base_address_length
</UL>

<P><STRONG><a name="[6a]"></a>nrf_impl_get_rx_pipes_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_enabled_prx_pipes
</UL>

<P><STRONG><a name="[6e]"></a>nrf_impl_get_timeslot_period</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_retransmit_delay
</UL>

<P><STRONG><a name="[e7]"></a>nrf_impl_get_timeslots_per_channel_when_in_sync</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>nrf_impl_get_timeslots_per_channel_when_out_of_sync</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>nrf_impl_get_max_allowed_tx_attempts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_max_number_of_tx_attempts
</UL>

<P><STRONG><a name="[42]"></a>nrf_impl_enable_rssi</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_enable_rssi &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[e9]"></a>nrf_impl_get_channel_selection_policy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>nrf_impl_get_idle_activity_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>nrf_impl_get_xosc_ctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_xosc_ctl
</UL>

<P><STRONG><a name="[23]"></a>async_state_tx_ack_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = async_state_tx_ack_complete &rArr; async_state_rx_enabling &rArr; nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>async_state_packet_received</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = async_state_packet_received &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_dyn_ack_status
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>async_state_rx_active</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_impala.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[99]"></a>async_state_rx_enabling</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = async_state_rx_enabling &rArr; nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_get_remaining_space_in_notification_queue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_tx_ack_complete
</UL>

<P><STRONG><a name="[27]"></a>nrf_impl_state_fun_timeslot_start</STRONG> (Thumb, 1216 bytes, Stack size 56 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_impl_state_fun_timeslot_start &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_there_is_ptx_packet_to_be_serviced
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_pipe
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_ack_ptr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_get_remaining_space_in_notification_queue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_rx_address_match
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_task_is_delayed
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_stop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_flw_call_event
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_timeslot
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel_index
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_execute_single_tick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_state_machine.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>nrf_impl_state_fun_device_send_packet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_impl_state_fun_device_send_packet &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_state_machine.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>NRF_ASSERT_INTERNAL_parse_and_forward</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_assert_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_assert_internal_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_flush
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TESTONLY_current_state_is_legal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_handler_rx_enable_start_tx_enable_start_disable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_ticks_until_current_timeslot_in_range_on_desired_channel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_ticks_until_current_timeslot_in_range
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_ticks_until_desired_channel
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_active
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_crc_length
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_tx_fifo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable_rssi
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_xosc_ctl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_crc_length
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_datarate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_output_power
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_base_address_length
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_mode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_add_packet_to_tx_fifo
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_output_power
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_datarate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_crc_length
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[87]"></a>nrf_chm_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[aa]"></a>nrf_chm_execute_single_tick</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_channel_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[b8]"></a>nrf_chm_execute_ticks</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrf_channel_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[eb]"></a>nrf_chm_ticks_until_channel_switch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_channel_manager.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>nrf_chm_ticks_until_desired_channel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_channel_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[bb]"></a>nrf_chm_ticks_until_current_timeslot_in_range</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrf_channel_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[bc]"></a>nrf_chm_ticks_until_current_timeslot_in_range_on_desired_channel</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nrf_channel_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[b1]"></a>nrf_chm_get_current_channel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_channel_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_chm_get_current_channel &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[98]"></a>nrf_chm_set_current_channel_index</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
</UL>

<P><STRONG><a name="[a8]"></a>nrf_chm_get_current_channel_index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_channel_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[a9]"></a>nrf_chm_set_current_timeslot</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_set_current_timeslot &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[ae]"></a>nrf_chm_get_current_timeslot</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_channel_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[83]"></a>nrf_flw_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_flywheel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_flw_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[b6]"></a>nrf_flw_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_flywheel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[ac]"></a>nrf_flw_stop</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, nrf_flywheel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_flw_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[ab]"></a>nrf_flw_get_runstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_flywheel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[a4]"></a>nrf_flw_task_is_delayed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_flywheel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[b3]"></a>NRF_flw_prepare_call</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nrf_flywheel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[88]"></a>nrf_flw_get_ext_capture_task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_flywheel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[b2]"></a>nrf_flw_get_flw_call_event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_flywheel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_flywheel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>nrf_lcore_force_disable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nrf_link_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[82]"></a>nrf_lcore_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_link_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[bd]"></a>TESTONLY_current_state_is_legal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_link_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[a0]"></a>nrf_lcore_prepare_operation</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, nrf_link_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_prepare_operation &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[a1]"></a>nrf_lcore_start_operation</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nrf_link_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_start_operation &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[ec]"></a>print_lc_debug_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_link_core.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>RADIO_IRQHandler</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, nrf_link_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_IRQHandler &rArr; nrf_lcore_handler_rx_enable_start_tx_enable_start_disable &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_handler_rx_enable_start_tx_enable_start_disable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>nrf_nm_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_notification_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_nm_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[9d]"></a>nrf_nm_add</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_notification_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_nm_add &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[a2]"></a>nrf_nm_get_remaining_space_in_notification_queue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_notification_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[19]"></a>SWI0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrf_notification_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>nrf_pm_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_pm_init &rArr; nrf_fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[ed]"></a>nrf_pm_get_ack_payload_pending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>nrf_pm_there_is_ptx_packet_to_be_serviced</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[8b]"></a>nrf_pm_reserve_packet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_reserve_packet
</UL>

<P><STRONG><a name="[94]"></a>nrf_pm_get_rx_fifo_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pm_get_rx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
</UL>

<P><STRONG><a name="[92]"></a>nrf_pm_read_tx_fifo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_read_tx_fifo
</UL>

<P><STRONG><a name="[af]"></a>nrf_pm_start_ptx</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_start_ptx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[c3]"></a>nrf_pm_search_for_ptx_pipe_to_service</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_tx_fifo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[a5]"></a>nrf_pm_end_ptx</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_pm_end_ptx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[a7]"></a>nrf_pm_get_current_ptx_pipe</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[a6]"></a>nrf_pm_get_current_ptx_packet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[b0]"></a>nrf_pm_get_current_ptx_ack_ptr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[a3]"></a>nrf_pm_start_prx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[8c]"></a>nrf_pm_free_packet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_free_packet &rArr; nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
</UL>

<P><STRONG><a name="[93]"></a>nrf_pm_get_tx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
</UL>

<P><STRONG><a name="[9c]"></a>nrf_pm_end_prx</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>

<P><STRONG><a name="[9f]"></a>nrf_pm_get_state</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[95]"></a>nrf_pm_get_available_fifo_packets</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_available_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_available_fifo_packets
</UL>

<P><STRONG><a name="[8d]"></a>nrf_pm_put_tx_fifo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_packet_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_available_packet_count
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
</UL>

<P><STRONG><a name="[96]"></a>nrf_pm_flush_tx_fifo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_packet_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_flush
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_tx_fifo
</UL>

<P><STRONG><a name="[90]"></a>nrf_pm_read_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_read_rx_fifo
</UL>

<P><STRONG><a name="[8e]"></a>nrf_pm_pop_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_pop_rx_fifo
</UL>

<P><STRONG><a name="[97]"></a>nrf_pm_flush_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_rx_fifo
</UL>

<P><STRONG><a name="[7e]"></a>nrf_pm_set_dyn_ack_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_dyn_ack_enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[9a]"></a>nrf_pm_get_dyn_ack_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
</UL>

<P><STRONG><a name="[86]"></a>nrf_sm_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_state_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[8a]"></a>nrf_sm_set_next_state</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_state_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sm_set_next_state &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>

<P><STRONG><a name="[89]"></a>nrf_sm_get_current_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_state_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>

<P><STRONG><a name="[ee]"></a>nrf_sm_get_prev_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_state_machine.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>nrf_sm_get_next_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_state_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[26]"></a>nrf_sm_execute</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_state_machine.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>nrf_fifo_init</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, nrf_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_init
</UL>

<P><STRONG><a name="[c0]"></a>nrf_fifo_reserve_packet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_reserve_packet
</UL>

<P><STRONG><a name="[c7]"></a>nrf_fifo_free_packet</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_free_packet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[c4]"></a>nrf_fifo_put_packet</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_fifo_put_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[c5]"></a>nrf_fifo_pop_packet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_pop_rx_fifo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[c2]"></a>nrf_fifo_read_packet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fifo_read_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_tx_fifo
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_rx_fifo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[c9]"></a>nrf_fifo_flush</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, nrf_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_tx_fifo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_rx_fifo
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_execute_ticks
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_add_packet_to_tx_fifo
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_nrf51.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; esb_init &rArr; nrf_esb_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3f]"></a>nrf_esb_disabled</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.nrf_esb_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[3e]"></a>nrf_esb_rx_data_ready</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.nrf_esb_rx_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_esb_rx_data_ready &rArr; nrf_esb_flush_rx_fifo &rArr; nrf_impl_flush_rx_fifo &rArr; nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstring
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_rx_fifo
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_fetch_packet_from_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[3d]"></a>nrf_esb_tx_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.nrf_esb_tx_failed))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[3c]"></a>nrf_esb_tx_success</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.nrf_esb_tx_success))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[c8]"></a>nrf_fifo_get_available_packet_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fifo.o(i.nrf_fifo_get_available_packet_count), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_available_fifo_packets
</UL>

<P><STRONG><a name="[c1]"></a>nrf_fifo_get_packet_count</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fifo.o(i.nrf_fifo_get_packet_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_tx_fifo_status
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[78]"></a>nrf_impl_get_crc_length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_get_crc_length), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_crc_length
</UL>

<P><STRONG><a name="[76]"></a>nrf_impl_get_datarate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_get_datarate), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_datarate
</UL>

<P><STRONG><a name="[74]"></a>nrf_impl_get_tx_power</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_get_tx_power), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_output_power
</UL>

<P><STRONG><a name="[32]"></a>nrf_impl_set_datarate</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_set_datarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_impl_set_datarate
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_datarate
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[34]"></a>nrf_impl_set_tx_power</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_output_power
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[ad]"></a>nrf_lcore_rx_address_match</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_link_core.o(i.nrf_lcore_rx_address_match))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[d2]"></a>simple_uart_config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, simple_uart.o(i.simple_uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = simple_uart_config &rArr; nrf_gpio_cfg_input
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>simple_uart_put</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simple_uart.o(i.simple_uart_put))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstring
</UL>

<P><STRONG><a name="[d3]"></a>simple_uart_putstring</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, simple_uart.o(i.simple_uart_putstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = simple_uart_putstring
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_rx_data_ready
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cf]"></a>esb_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = esb_init &rArr; nrf_esb_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_xosc_ctl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_retransmit_delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_max_number_of_tx_attempts
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_enabled_prx_pipes
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_datarate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_crc_length
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_channel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_length
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_address_prefix_byte
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cd]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d5]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simple_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
</UL>

<P><STRONG><a name="[d4]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, simple_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
</UL>

<P><STRONG><a name="[25]"></a>device_ack_received</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = device_ack_received &rArr; nrf_pm_end_ptx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_pipe
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_packet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_task_is_delayed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel_index
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>swap_bytes</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swap_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_pipes_1_to_7_base_address
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_pipe_0_base_address
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_pipes_1_to_7_base_address
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_pipe_0_base_address
</UL>

<P><STRONG><a name="[80]"></a>sm_start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_get_next_state
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_start
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_disable
</UL>

<P><STRONG><a name="[81]"></a>update_mode</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nrf_impala.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[be]"></a>nrf_lcore_handler_rx_enable_start_tx_enable_start_disable</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, nrf_link_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_handler_rx_enable_start_tx_enable_start_disable &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
